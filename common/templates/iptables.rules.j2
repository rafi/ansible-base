*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:TCP - [0:0]
:UDP - [0:0]
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -m conntrack --ctstate INVALID -j DROP
-A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
-A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-rst
-A INPUT -j REJECT --reject-with icmp-proto-unreachable

{% for source, rules in iptables_accept|groupby('source') %}
{% if source is none %}
{% for proto, normrules in rules|groupby('proto') %}
-A {{ proto|upper }} -p {{ proto }} -m multiport --dports {{ normrules|map(attribute='port')|join(",") }} -j ACCEPT
{% endfor %}
{% elif source == 'limit' %}
{% for rule in rules %}
-A {{ rule.proto|upper }} -p {{ rule.proto }} --dport {{ rule.port }} -m recent --update --name limit-tcp-{{ rule.port}} --hitcount 10 --seconds 30 -j REJECT --reject-with icmp-port-unreachable
-A {{ rule.proto|upper }} -p {{ rule.proto }} --dport {{ rule.port }} -m recent --set --name limit-tcp-{{ rule.port}} -j ACCEPT
{% endfor %}
{% else %}
{% for rule in rules %}
-A {{ rule.proto|upper }} -p {{ rule.proto }} --dport {{ rule.port }} -s {{ rule.source }} -j ACCEPT
{% endfor %}
{% endif %}
{% endfor %}

COMMIT
